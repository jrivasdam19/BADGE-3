package com.example.controller;

import com.example.data.Education;
import com.example.data.EducationRepository;
import com.example.helper.Scrapping;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.inject.Inject;
import javax.ws.rs.*;
import java.util.List;

import static javax.ws.rs.core.MediaType.APPLICATION_JSON;

@Path("/education")
@Produces(APPLICATION_JSON)
public class EducationResource {

    static Logger log = LoggerFactory.getLogger(Scrapping.class);
    @Inject
    private EducationRepository educationRepository;

//    public EducationResource(StudentService studentService, EducationService educationService) {
//        this.studentService = studentService;
//        this.educationService = educationService;
//    }

    @GET
    @Path("/hello")
    public String hello() {
        return "hello";
    }

    @GET
    @Path("/getAll")
    public Iterable<Education> listAll() {
        try {
            return educationRepository.listAll();
        } catch (Exception e) {
            log.error("getEducation", e);
            return null;
        }
    }
    @GET
    @Path("/getCount")
    public long count(){
        return educationRepository.count();
    }

    @GET
    @Path("/getCode{code}")
//    public Education getOneEducation(@QueryParam("code") @DefaultValue("FP") String primaryKey) {
    public Education getCode(@PathParam("code") @DefaultValue("FP") String primaryKey) {
        try {
            return (Education) educationRepository.findByCode(primaryKey);
            //return primaryKey.isEmpty() ?
//                    educationRepository.findALl()
//                            : educationRepository.findByCode(primaryKey);
        } catch (Exception e) {
            log.error("getOneEducation()", e);
            return null;
        }
    }

    /** @GetMapping("getStudent") public Iterable<Student> getStudent() {
    try {
    return studentService.getREPOSITORY().findAll();
    } catch (Exception e) {
    log.error("getStudent()", e);
    return null;
    }
    }

     @GetMapping("getStudentCount") public String getStudentCount() {
     try {
     return String.valueOf(studentService.getREPOSITORY().count());
     } catch (Exception e) {
     log.error("getStudentCount()", e);
     return null;
     }
     }

     @GetMapping("getOneStudent") public Optional<Student> getOneStudent(@RequestParam(name = "id", required = false, defaultValue = "1") long primaryKey) {
     try {
     return studentService.getREPOSITORY().findById(primaryKey);
     } catch (Exception e) {
     log.error("getOneStudent()", e);
     return null;
     }
     }**/

}
